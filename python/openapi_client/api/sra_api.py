# coding: utf-8

"""
    OmicIDX

        The OmicIDX API documentation is available in three forms:  - [RapiDoc](/docs) - [OpenAPI/Swagger Interactive](/swatterdoc) - [ReDoc (more readable in some ways)](/redoc)    # noqa: E501

    The version of the OpenAPI document: 0.99
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class SRAApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def experiment_by_accession_sra_experiments_accession_get(self, accession, **kwargs):  # noqa: E501
        """Experiment By Accession  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_by_accession_sra_experiments_accession_get(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.experiment_by_accession_sra_experiments_accession_get_with_http_info(accession, **kwargs)  # noqa: E501

    def experiment_by_accession_sra_experiments_accession_get_with_http_info(self, accession, **kwargs):  # noqa: E501
        """Experiment By Accession  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_by_accession_sra_experiments_accession_get_with_http_info(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accession',
            'include_fields',
            'exclude_fields'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_by_accession_sra_experiments_accession_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accession' is set
        if self.api_client.client_side_validation and ('accession' not in local_var_params or  # noqa: E501
                                                        local_var_params['accession'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accession` when calling `experiment_by_accession_sra_experiments_accession_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accession' in local_var_params:
            path_params['accession'] = local_var_params['accession']  # noqa: E501

        query_params = []
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/experiments/{accession}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiment_by_accession_sra_experiments_accession_get_0(self, accession, **kwargs):  # noqa: E501
        """Experiment By Accession  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_by_accession_sra_experiments_accession_get_0(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.experiment_by_accession_sra_experiments_accession_get_0_with_http_info(accession, **kwargs)  # noqa: E501

    def experiment_by_accession_sra_experiments_accession_get_0_with_http_info(self, accession, **kwargs):  # noqa: E501
        """Experiment By Accession  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiment_by_accession_sra_experiments_accession_get_0_with_http_info(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accession',
            'include_fields',
            'exclude_fields'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiment_by_accession_sra_experiments_accession_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accession' is set
        if self.api_client.client_side_validation and ('accession' not in local_var_params or  # noqa: E501
                                                        local_var_params['accession'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accession` when calling `experiment_by_accession_sra_experiments_accession_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accession' in local_var_params:
            path_params['accession'] = local_var_params['accession']  # noqa: E501

        query_params = []
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/experiments/{accession}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiments_for_sample_sra_samples_accession_experiments_get(self, accession, **kwargs):  # noqa: E501
        """Experiments For Sample  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiments_for_sample_sra_samples_accession_experiments_get(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param int size:
        :param str cursor:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.experiments_for_sample_sra_samples_accession_experiments_get_with_http_info(accession, **kwargs)  # noqa: E501

    def experiments_for_sample_sra_samples_accession_experiments_get_with_http_info(self, accession, **kwargs):  # noqa: E501
        """Experiments For Sample  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiments_for_sample_sra_samples_accession_experiments_get_with_http_info(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param int size:
        :param str cursor:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accession',
            'include_fields',
            'exclude_fields',
            'size',
            'cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiments_for_sample_sra_samples_accession_experiments_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accession' is set
        if self.api_client.client_side_validation and ('accession' not in local_var_params or  # noqa: E501
                                                        local_var_params['accession'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accession` when calling `experiments_for_sample_sra_samples_accession_experiments_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accession' in local_var_params:
            path_params['accession'] = local_var_params['accession']  # noqa: E501

        query_params = []
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501
        if 'size' in local_var_params and local_var_params['size'] is not None:  # noqa: E501
            query_params.append(('size', local_var_params['size']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/samples/{accession}/experiments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiments_for_sample_sra_samples_accession_experiments_get_0(self, accession, **kwargs):  # noqa: E501
        """Experiments For Sample  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiments_for_sample_sra_samples_accession_experiments_get_0(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param int size:
        :param str cursor:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.experiments_for_sample_sra_samples_accession_experiments_get_0_with_http_info(accession, **kwargs)  # noqa: E501

    def experiments_for_sample_sra_samples_accession_experiments_get_0_with_http_info(self, accession, **kwargs):  # noqa: E501
        """Experiments For Sample  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiments_for_sample_sra_samples_accession_experiments_get_0_with_http_info(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param int size:
        :param str cursor:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accession',
            'include_fields',
            'exclude_fields',
            'size',
            'cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiments_for_sample_sra_samples_accession_experiments_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accession' is set
        if self.api_client.client_side_validation and ('accession' not in local_var_params or  # noqa: E501
                                                        local_var_params['accession'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accession` when calling `experiments_for_sample_sra_samples_accession_experiments_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accession' in local_var_params:
            path_params['accession'] = local_var_params['accession']  # noqa: E501

        query_params = []
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501
        if 'size' in local_var_params and local_var_params['size'] is not None:  # noqa: E501
            query_params.append(('size', local_var_params['size']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/samples/{accession}/experiments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiments_for_study_sra_studies_accession_experiments_get(self, accession, **kwargs):  # noqa: E501
        """Experiments For Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiments_for_study_sra_studies_accession_experiments_get(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param int size:
        :param str cursor:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.experiments_for_study_sra_studies_accession_experiments_get_with_http_info(accession, **kwargs)  # noqa: E501

    def experiments_for_study_sra_studies_accession_experiments_get_with_http_info(self, accession, **kwargs):  # noqa: E501
        """Experiments For Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiments_for_study_sra_studies_accession_experiments_get_with_http_info(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param int size:
        :param str cursor:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accession',
            'include_fields',
            'exclude_fields',
            'size',
            'cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiments_for_study_sra_studies_accession_experiments_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accession' is set
        if self.api_client.client_side_validation and ('accession' not in local_var_params or  # noqa: E501
                                                        local_var_params['accession'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accession` when calling `experiments_for_study_sra_studies_accession_experiments_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accession' in local_var_params:
            path_params['accession'] = local_var_params['accession']  # noqa: E501

        query_params = []
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501
        if 'size' in local_var_params and local_var_params['size'] is not None:  # noqa: E501
            query_params.append(('size', local_var_params['size']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/studies/{accession}/experiments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiments_for_study_sra_studies_accession_experiments_get_0(self, accession, **kwargs):  # noqa: E501
        """Experiments For Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiments_for_study_sra_studies_accession_experiments_get_0(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param int size:
        :param str cursor:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.experiments_for_study_sra_studies_accession_experiments_get_0_with_http_info(accession, **kwargs)  # noqa: E501

    def experiments_for_study_sra_studies_accession_experiments_get_0_with_http_info(self, accession, **kwargs):  # noqa: E501
        """Experiments For Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiments_for_study_sra_studies_accession_experiments_get_0_with_http_info(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param int size:
        :param str cursor:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accession',
            'include_fields',
            'exclude_fields',
            'size',
            'cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiments_for_study_sra_studies_accession_experiments_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accession' is set
        if self.api_client.client_side_validation and ('accession' not in local_var_params or  # noqa: E501
                                                        local_var_params['accession'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accession` when calling `experiments_for_study_sra_studies_accession_experiments_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accession' in local_var_params:
            path_params['accession'] = local_var_params['accession']  # noqa: E501

        query_params = []
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501
        if 'size' in local_var_params and local_var_params['size'] is not None:  # noqa: E501
            query_params.append(('size', local_var_params['size']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/studies/{accession}/experiments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiments_sra_experiments_get(self, **kwargs):  # noqa: E501
        """Experiments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiments_sra_experiments_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str q: The query, using [lucene query syntax](https://lucene.apache.org/core/3_6_0/queryparsersyntax.html)
        :param int size:
        :param str cursor: The cursor is used to scroll through results. For a query with more results than `size`, the result will include `cursor` in the result json. Use that value here and re-issue the query. The next set or results will be returned. When no more results are available, the `cursor` will again be empty in the result json.
        :param int facet_size: The maximum number of records returned for each facet. This has no effect unless one or more facets are specified.
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param list[str] facets: A list of strings identifying fields for faceted search results. Simple term faceting is used here, meaning that fields that are short text and repeated across records will be binned and counted.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.experiments_sra_experiments_get_with_http_info(**kwargs)  # noqa: E501

    def experiments_sra_experiments_get_with_http_info(self, **kwargs):  # noqa: E501
        """Experiments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiments_sra_experiments_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str q: The query, using [lucene query syntax](https://lucene.apache.org/core/3_6_0/queryparsersyntax.html)
        :param int size:
        :param str cursor: The cursor is used to scroll through results. For a query with more results than `size`, the result will include `cursor` in the result json. Use that value here and re-issue the query. The next set or results will be returned. When no more results are available, the `cursor` will again be empty in the result json.
        :param int facet_size: The maximum number of records returned for each facet. This has no effect unless one or more facets are specified.
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param list[str] facets: A list of strings identifying fields for faceted search results. Simple term faceting is used here, meaning that fields that are short text and repeated across records will be binned and counted.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'q',
            'size',
            'cursor',
            'facet_size',
            'include_fields',
            'exclude_fields',
            'facets'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiments_sra_experiments_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in local_var_params and local_var_params['q'] is not None:  # noqa: E501
            query_params.append(('q', local_var_params['q']))  # noqa: E501
        if 'size' in local_var_params and local_var_params['size'] is not None:  # noqa: E501
            query_params.append(('size', local_var_params['size']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'facet_size' in local_var_params and local_var_params['facet_size'] is not None:  # noqa: E501
            query_params.append(('facet_size', local_var_params['facet_size']))  # noqa: E501
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501
        if 'facets' in local_var_params and local_var_params['facets'] is not None:  # noqa: E501
            query_params.append(('facets', local_var_params['facets']))  # noqa: E501
            collection_formats['facets'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/experiments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def experiments_sra_experiments_get_0(self, **kwargs):  # noqa: E501
        """Experiments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiments_sra_experiments_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str q: The query, using [lucene query syntax](https://lucene.apache.org/core/3_6_0/queryparsersyntax.html)
        :param int size:
        :param str cursor: The cursor is used to scroll through results. For a query with more results than `size`, the result will include `cursor` in the result json. Use that value here and re-issue the query. The next set or results will be returned. When no more results are available, the `cursor` will again be empty in the result json.
        :param int facet_size: The maximum number of records returned for each facet. This has no effect unless one or more facets are specified.
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param list[str] facets: A list of strings identifying fields for faceted search results. Simple term faceting is used here, meaning that fields that are short text and repeated across records will be binned and counted.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.experiments_sra_experiments_get_0_with_http_info(**kwargs)  # noqa: E501

    def experiments_sra_experiments_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """Experiments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.experiments_sra_experiments_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str q: The query, using [lucene query syntax](https://lucene.apache.org/core/3_6_0/queryparsersyntax.html)
        :param int size:
        :param str cursor: The cursor is used to scroll through results. For a query with more results than `size`, the result will include `cursor` in the result json. Use that value here and re-issue the query. The next set or results will be returned. When no more results are available, the `cursor` will again be empty in the result json.
        :param int facet_size: The maximum number of records returned for each facet. This has no effect unless one or more facets are specified.
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param list[str] facets: A list of strings identifying fields for faceted search results. Simple term faceting is used here, meaning that fields that are short text and repeated across records will be binned and counted.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'q',
            'size',
            'cursor',
            'facet_size',
            'include_fields',
            'exclude_fields',
            'facets'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method experiments_sra_experiments_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in local_var_params and local_var_params['q'] is not None:  # noqa: E501
            query_params.append(('q', local_var_params['q']))  # noqa: E501
        if 'size' in local_var_params and local_var_params['size'] is not None:  # noqa: E501
            query_params.append(('size', local_var_params['size']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'facet_size' in local_var_params and local_var_params['facet_size'] is not None:  # noqa: E501
            query_params.append(('facet_size', local_var_params['facet_size']))  # noqa: E501
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501
        if 'facets' in local_var_params and local_var_params['facets'] is not None:  # noqa: E501
            query_params.append(('facets', local_var_params['facets']))  # noqa: E501
            collection_formats['facets'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/experiments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mapping_sra_fields_entity_get(self, entity, **kwargs):  # noqa: E501
        """Mapping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mapping_sra_fields_entity_get(entity, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.mapping_sra_fields_entity_get_with_http_info(entity, **kwargs)  # noqa: E501

    def mapping_sra_fields_entity_get_with_http_info(self, entity, **kwargs):  # noqa: E501
        """Mapping  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mapping_sra_fields_entity_get_with_http_info(entity, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'entity'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mapping_sra_fields_entity_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'entity' is set
        if self.api_client.client_side_validation and ('entity' not in local_var_params or  # noqa: E501
                                                        local_var_params['entity'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `entity` when calling `mapping_sra_fields_entity_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity' in local_var_params:
            path_params['entity'] = local_var_params['entity']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/fields/{entity}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def run_by_accession_sra_runs_accession_get(self, accession, **kwargs):  # noqa: E501
        """Run By Accession  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_by_accession_sra_runs_accession_get(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.run_by_accession_sra_runs_accession_get_with_http_info(accession, **kwargs)  # noqa: E501

    def run_by_accession_sra_runs_accession_get_with_http_info(self, accession, **kwargs):  # noqa: E501
        """Run By Accession  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_by_accession_sra_runs_accession_get_with_http_info(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accession',
            'include_fields',
            'exclude_fields'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method run_by_accession_sra_runs_accession_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accession' is set
        if self.api_client.client_side_validation and ('accession' not in local_var_params or  # noqa: E501
                                                        local_var_params['accession'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accession` when calling `run_by_accession_sra_runs_accession_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accession' in local_var_params:
            path_params['accession'] = local_var_params['accession']  # noqa: E501

        query_params = []
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/runs/{accession}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def run_by_accession_sra_runs_accession_get_0(self, accession, **kwargs):  # noqa: E501
        """Run By Accession  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_by_accession_sra_runs_accession_get_0(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.run_by_accession_sra_runs_accession_get_0_with_http_info(accession, **kwargs)  # noqa: E501

    def run_by_accession_sra_runs_accession_get_0_with_http_info(self, accession, **kwargs):  # noqa: E501
        """Run By Accession  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.run_by_accession_sra_runs_accession_get_0_with_http_info(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accession',
            'include_fields',
            'exclude_fields'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method run_by_accession_sra_runs_accession_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accession' is set
        if self.api_client.client_side_validation and ('accession' not in local_var_params or  # noqa: E501
                                                        local_var_params['accession'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accession` when calling `run_by_accession_sra_runs_accession_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accession' in local_var_params:
            path_params['accession'] = local_var_params['accession']  # noqa: E501

        query_params = []
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/runs/{accession}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def runs_for_experiment_sra_experiments_accession_runs_get(self, accession, **kwargs):  # noqa: E501
        """Runs For Experiment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runs_for_experiment_sra_experiments_accession_runs_get(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param int size:
        :param str cursor:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.runs_for_experiment_sra_experiments_accession_runs_get_with_http_info(accession, **kwargs)  # noqa: E501

    def runs_for_experiment_sra_experiments_accession_runs_get_with_http_info(self, accession, **kwargs):  # noqa: E501
        """Runs For Experiment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runs_for_experiment_sra_experiments_accession_runs_get_with_http_info(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param int size:
        :param str cursor:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accession',
            'include_fields',
            'exclude_fields',
            'size',
            'cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method runs_for_experiment_sra_experiments_accession_runs_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accession' is set
        if self.api_client.client_side_validation and ('accession' not in local_var_params or  # noqa: E501
                                                        local_var_params['accession'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accession` when calling `runs_for_experiment_sra_experiments_accession_runs_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accession' in local_var_params:
            path_params['accession'] = local_var_params['accession']  # noqa: E501

        query_params = []
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501
        if 'size' in local_var_params and local_var_params['size'] is not None:  # noqa: E501
            query_params.append(('size', local_var_params['size']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/experiments/{accession}/runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def runs_for_experiment_sra_experiments_accession_runs_get_0(self, accession, **kwargs):  # noqa: E501
        """Runs For Experiment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runs_for_experiment_sra_experiments_accession_runs_get_0(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param int size:
        :param str cursor:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.runs_for_experiment_sra_experiments_accession_runs_get_0_with_http_info(accession, **kwargs)  # noqa: E501

    def runs_for_experiment_sra_experiments_accession_runs_get_0_with_http_info(self, accession, **kwargs):  # noqa: E501
        """Runs For Experiment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runs_for_experiment_sra_experiments_accession_runs_get_0_with_http_info(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param int size:
        :param str cursor:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accession',
            'include_fields',
            'exclude_fields',
            'size',
            'cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method runs_for_experiment_sra_experiments_accession_runs_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accession' is set
        if self.api_client.client_side_validation and ('accession' not in local_var_params or  # noqa: E501
                                                        local_var_params['accession'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accession` when calling `runs_for_experiment_sra_experiments_accession_runs_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accession' in local_var_params:
            path_params['accession'] = local_var_params['accession']  # noqa: E501

        query_params = []
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501
        if 'size' in local_var_params and local_var_params['size'] is not None:  # noqa: E501
            query_params.append(('size', local_var_params['size']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/experiments/{accession}/runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def runs_for_sample_sra_samples_accession_runs_get(self, accession, **kwargs):  # noqa: E501
        """Runs For Sample  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runs_for_sample_sra_samples_accession_runs_get(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param int size:
        :param str cursor:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.runs_for_sample_sra_samples_accession_runs_get_with_http_info(accession, **kwargs)  # noqa: E501

    def runs_for_sample_sra_samples_accession_runs_get_with_http_info(self, accession, **kwargs):  # noqa: E501
        """Runs For Sample  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runs_for_sample_sra_samples_accession_runs_get_with_http_info(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param int size:
        :param str cursor:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accession',
            'include_fields',
            'exclude_fields',
            'size',
            'cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method runs_for_sample_sra_samples_accession_runs_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accession' is set
        if self.api_client.client_side_validation and ('accession' not in local_var_params or  # noqa: E501
                                                        local_var_params['accession'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accession` when calling `runs_for_sample_sra_samples_accession_runs_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accession' in local_var_params:
            path_params['accession'] = local_var_params['accession']  # noqa: E501

        query_params = []
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501
        if 'size' in local_var_params and local_var_params['size'] is not None:  # noqa: E501
            query_params.append(('size', local_var_params['size']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/samples/{accession}/runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def runs_for_sample_sra_samples_accession_runs_get_0(self, accession, **kwargs):  # noqa: E501
        """Runs For Sample  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runs_for_sample_sra_samples_accession_runs_get_0(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param int size:
        :param str cursor:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.runs_for_sample_sra_samples_accession_runs_get_0_with_http_info(accession, **kwargs)  # noqa: E501

    def runs_for_sample_sra_samples_accession_runs_get_0_with_http_info(self, accession, **kwargs):  # noqa: E501
        """Runs For Sample  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runs_for_sample_sra_samples_accession_runs_get_0_with_http_info(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param int size:
        :param str cursor:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accession',
            'include_fields',
            'exclude_fields',
            'size',
            'cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method runs_for_sample_sra_samples_accession_runs_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accession' is set
        if self.api_client.client_side_validation and ('accession' not in local_var_params or  # noqa: E501
                                                        local_var_params['accession'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accession` when calling `runs_for_sample_sra_samples_accession_runs_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accession' in local_var_params:
            path_params['accession'] = local_var_params['accession']  # noqa: E501

        query_params = []
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501
        if 'size' in local_var_params and local_var_params['size'] is not None:  # noqa: E501
            query_params.append(('size', local_var_params['size']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/samples/{accession}/runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def runs_for_study_sra_studies_accession_runs_get(self, accession, **kwargs):  # noqa: E501
        """Runs For Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runs_for_study_sra_studies_accession_runs_get(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param int size:
        :param str cursor:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.runs_for_study_sra_studies_accession_runs_get_with_http_info(accession, **kwargs)  # noqa: E501

    def runs_for_study_sra_studies_accession_runs_get_with_http_info(self, accession, **kwargs):  # noqa: E501
        """Runs For Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runs_for_study_sra_studies_accession_runs_get_with_http_info(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param int size:
        :param str cursor:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accession',
            'include_fields',
            'exclude_fields',
            'size',
            'cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method runs_for_study_sra_studies_accession_runs_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accession' is set
        if self.api_client.client_side_validation and ('accession' not in local_var_params or  # noqa: E501
                                                        local_var_params['accession'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accession` when calling `runs_for_study_sra_studies_accession_runs_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accession' in local_var_params:
            path_params['accession'] = local_var_params['accession']  # noqa: E501

        query_params = []
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501
        if 'size' in local_var_params and local_var_params['size'] is not None:  # noqa: E501
            query_params.append(('size', local_var_params['size']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/studies/{accession}/runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def runs_for_study_sra_studies_accession_runs_get_0(self, accession, **kwargs):  # noqa: E501
        """Runs For Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runs_for_study_sra_studies_accession_runs_get_0(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param int size:
        :param str cursor:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.runs_for_study_sra_studies_accession_runs_get_0_with_http_info(accession, **kwargs)  # noqa: E501

    def runs_for_study_sra_studies_accession_runs_get_0_with_http_info(self, accession, **kwargs):  # noqa: E501
        """Runs For Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runs_for_study_sra_studies_accession_runs_get_0_with_http_info(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param int size:
        :param str cursor:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accession',
            'include_fields',
            'exclude_fields',
            'size',
            'cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method runs_for_study_sra_studies_accession_runs_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accession' is set
        if self.api_client.client_side_validation and ('accession' not in local_var_params or  # noqa: E501
                                                        local_var_params['accession'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accession` when calling `runs_for_study_sra_studies_accession_runs_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accession' in local_var_params:
            path_params['accession'] = local_var_params['accession']  # noqa: E501

        query_params = []
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501
        if 'size' in local_var_params and local_var_params['size'] is not None:  # noqa: E501
            query_params.append(('size', local_var_params['size']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/studies/{accession}/runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def runs_sra_runs_get(self, **kwargs):  # noqa: E501
        """Runs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runs_sra_runs_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str q: The query, using [lucene query syntax](https://lucene.apache.org/core/3_6_0/queryparsersyntax.html)
        :param int size:
        :param str cursor: The cursor is used to scroll through results. For a query with more results than `size`, the result will include `cursor` in the result json. Use that value here and re-issue the query. The next set or results will be returned. When no more results are available, the `cursor` will again be empty in the result json.
        :param int facet_size: The maximum number of records returned for each facet. This has no effect unless one or more facets are specified.
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param list[str] facets: A list of strings identifying fields for faceted search results. Simple term faceting is used here, meaning that fields that are short text and repeated across records will be binned and counted.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.runs_sra_runs_get_with_http_info(**kwargs)  # noqa: E501

    def runs_sra_runs_get_with_http_info(self, **kwargs):  # noqa: E501
        """Runs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runs_sra_runs_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str q: The query, using [lucene query syntax](https://lucene.apache.org/core/3_6_0/queryparsersyntax.html)
        :param int size:
        :param str cursor: The cursor is used to scroll through results. For a query with more results than `size`, the result will include `cursor` in the result json. Use that value here and re-issue the query. The next set or results will be returned. When no more results are available, the `cursor` will again be empty in the result json.
        :param int facet_size: The maximum number of records returned for each facet. This has no effect unless one or more facets are specified.
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param list[str] facets: A list of strings identifying fields for faceted search results. Simple term faceting is used here, meaning that fields that are short text and repeated across records will be binned and counted.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'q',
            'size',
            'cursor',
            'facet_size',
            'include_fields',
            'exclude_fields',
            'facets'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method runs_sra_runs_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in local_var_params and local_var_params['q'] is not None:  # noqa: E501
            query_params.append(('q', local_var_params['q']))  # noqa: E501
        if 'size' in local_var_params and local_var_params['size'] is not None:  # noqa: E501
            query_params.append(('size', local_var_params['size']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'facet_size' in local_var_params and local_var_params['facet_size'] is not None:  # noqa: E501
            query_params.append(('facet_size', local_var_params['facet_size']))  # noqa: E501
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501
        if 'facets' in local_var_params and local_var_params['facets'] is not None:  # noqa: E501
            query_params.append(('facets', local_var_params['facets']))  # noqa: E501
            collection_formats['facets'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def runs_sra_runs_get_0(self, **kwargs):  # noqa: E501
        """Runs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runs_sra_runs_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str q: The query, using [lucene query syntax](https://lucene.apache.org/core/3_6_0/queryparsersyntax.html)
        :param int size:
        :param str cursor: The cursor is used to scroll through results. For a query with more results than `size`, the result will include `cursor` in the result json. Use that value here and re-issue the query. The next set or results will be returned. When no more results are available, the `cursor` will again be empty in the result json.
        :param int facet_size: The maximum number of records returned for each facet. This has no effect unless one or more facets are specified.
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param list[str] facets: A list of strings identifying fields for faceted search results. Simple term faceting is used here, meaning that fields that are short text and repeated across records will be binned and counted.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.runs_sra_runs_get_0_with_http_info(**kwargs)  # noqa: E501

    def runs_sra_runs_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """Runs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.runs_sra_runs_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str q: The query, using [lucene query syntax](https://lucene.apache.org/core/3_6_0/queryparsersyntax.html)
        :param int size:
        :param str cursor: The cursor is used to scroll through results. For a query with more results than `size`, the result will include `cursor` in the result json. Use that value here and re-issue the query. The next set or results will be returned. When no more results are available, the `cursor` will again be empty in the result json.
        :param int facet_size: The maximum number of records returned for each facet. This has no effect unless one or more facets are specified.
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param list[str] facets: A list of strings identifying fields for faceted search results. Simple term faceting is used here, meaning that fields that are short text and repeated across records will be binned and counted.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'q',
            'size',
            'cursor',
            'facet_size',
            'include_fields',
            'exclude_fields',
            'facets'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method runs_sra_runs_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in local_var_params and local_var_params['q'] is not None:  # noqa: E501
            query_params.append(('q', local_var_params['q']))  # noqa: E501
        if 'size' in local_var_params and local_var_params['size'] is not None:  # noqa: E501
            query_params.append(('size', local_var_params['size']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'facet_size' in local_var_params and local_var_params['facet_size'] is not None:  # noqa: E501
            query_params.append(('facet_size', local_var_params['facet_size']))  # noqa: E501
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501
        if 'facets' in local_var_params and local_var_params['facets'] is not None:  # noqa: E501
            query_params.append(('facets', local_var_params['facets']))  # noqa: E501
            collection_formats['facets'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_by_accession_sra_samples_accession_get(self, accession, **kwargs):  # noqa: E501
        """Sample By Accession  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_by_accession_sra_samples_accession_get(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.sample_by_accession_sra_samples_accession_get_with_http_info(accession, **kwargs)  # noqa: E501

    def sample_by_accession_sra_samples_accession_get_with_http_info(self, accession, **kwargs):  # noqa: E501
        """Sample By Accession  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_by_accession_sra_samples_accession_get_with_http_info(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accession',
            'include_fields',
            'exclude_fields'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_by_accession_sra_samples_accession_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accession' is set
        if self.api_client.client_side_validation and ('accession' not in local_var_params or  # noqa: E501
                                                        local_var_params['accession'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accession` when calling `sample_by_accession_sra_samples_accession_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accession' in local_var_params:
            path_params['accession'] = local_var_params['accession']  # noqa: E501

        query_params = []
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/samples/{accession}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sample_by_accession_sra_samples_accession_get_0(self, accession, **kwargs):  # noqa: E501
        """Sample By Accession  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_by_accession_sra_samples_accession_get_0(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.sample_by_accession_sra_samples_accession_get_0_with_http_info(accession, **kwargs)  # noqa: E501

    def sample_by_accession_sra_samples_accession_get_0_with_http_info(self, accession, **kwargs):  # noqa: E501
        """Sample By Accession  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sample_by_accession_sra_samples_accession_get_0_with_http_info(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accession',
            'include_fields',
            'exclude_fields'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sample_by_accession_sra_samples_accession_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accession' is set
        if self.api_client.client_side_validation and ('accession' not in local_var_params or  # noqa: E501
                                                        local_var_params['accession'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accession` when calling `sample_by_accession_sra_samples_accession_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accession' in local_var_params:
            path_params['accession'] = local_var_params['accession']  # noqa: E501

        query_params = []
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/samples/{accession}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def samples_for_study_sra_studies_accession_samples_get(self, accession, **kwargs):  # noqa: E501
        """Samples For Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.samples_for_study_sra_studies_accession_samples_get(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param int size:
        :param str cursor:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.samples_for_study_sra_studies_accession_samples_get_with_http_info(accession, **kwargs)  # noqa: E501

    def samples_for_study_sra_studies_accession_samples_get_with_http_info(self, accession, **kwargs):  # noqa: E501
        """Samples For Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.samples_for_study_sra_studies_accession_samples_get_with_http_info(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param int size:
        :param str cursor:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accession',
            'include_fields',
            'exclude_fields',
            'size',
            'cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method samples_for_study_sra_studies_accession_samples_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accession' is set
        if self.api_client.client_side_validation and ('accession' not in local_var_params or  # noqa: E501
                                                        local_var_params['accession'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accession` when calling `samples_for_study_sra_studies_accession_samples_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accession' in local_var_params:
            path_params['accession'] = local_var_params['accession']  # noqa: E501

        query_params = []
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501
        if 'size' in local_var_params and local_var_params['size'] is not None:  # noqa: E501
            query_params.append(('size', local_var_params['size']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/studies/{accession}/samples', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def samples_for_study_sra_studies_accession_samples_get_0(self, accession, **kwargs):  # noqa: E501
        """Samples For Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.samples_for_study_sra_studies_accession_samples_get_0(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param int size:
        :param str cursor:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.samples_for_study_sra_studies_accession_samples_get_0_with_http_info(accession, **kwargs)  # noqa: E501

    def samples_for_study_sra_studies_accession_samples_get_0_with_http_info(self, accession, **kwargs):  # noqa: E501
        """Samples For Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.samples_for_study_sra_studies_accession_samples_get_0_with_http_info(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param int size:
        :param str cursor:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accession',
            'include_fields',
            'exclude_fields',
            'size',
            'cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method samples_for_study_sra_studies_accession_samples_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accession' is set
        if self.api_client.client_side_validation and ('accession' not in local_var_params or  # noqa: E501
                                                        local_var_params['accession'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accession` when calling `samples_for_study_sra_studies_accession_samples_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accession' in local_var_params:
            path_params['accession'] = local_var_params['accession']  # noqa: E501

        query_params = []
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501
        if 'size' in local_var_params and local_var_params['size'] is not None:  # noqa: E501
            query_params.append(('size', local_var_params['size']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/studies/{accession}/samples', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def samples_sra_samples_get(self, **kwargs):  # noqa: E501
        """Samples  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.samples_sra_samples_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str q: The query, using [lucene query syntax](https://lucene.apache.org/core/3_6_0/queryparsersyntax.html)
        :param int size:
        :param str cursor: The cursor is used to scroll through results. For a query with more results than `size`, the result will include `cursor` in the result json. Use that value here and re-issue the query. The next set or results will be returned. When no more results are available, the `cursor` will again be empty in the result json.
        :param int facet_size: The maximum number of records returned for each facet. This has no effect unless one or more facets are specified.
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param list[str] facets: A list of strings identifying fields for faceted search results. Simple term faceting is used here, meaning that fields that are short text and repeated across records will be binned and counted.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.samples_sra_samples_get_with_http_info(**kwargs)  # noqa: E501

    def samples_sra_samples_get_with_http_info(self, **kwargs):  # noqa: E501
        """Samples  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.samples_sra_samples_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str q: The query, using [lucene query syntax](https://lucene.apache.org/core/3_6_0/queryparsersyntax.html)
        :param int size:
        :param str cursor: The cursor is used to scroll through results. For a query with more results than `size`, the result will include `cursor` in the result json. Use that value here and re-issue the query. The next set or results will be returned. When no more results are available, the `cursor` will again be empty in the result json.
        :param int facet_size: The maximum number of records returned for each facet. This has no effect unless one or more facets are specified.
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param list[str] facets: A list of strings identifying fields for faceted search results. Simple term faceting is used here, meaning that fields that are short text and repeated across records will be binned and counted.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'q',
            'size',
            'cursor',
            'facet_size',
            'include_fields',
            'exclude_fields',
            'facets'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method samples_sra_samples_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in local_var_params and local_var_params['q'] is not None:  # noqa: E501
            query_params.append(('q', local_var_params['q']))  # noqa: E501
        if 'size' in local_var_params and local_var_params['size'] is not None:  # noqa: E501
            query_params.append(('size', local_var_params['size']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'facet_size' in local_var_params and local_var_params['facet_size'] is not None:  # noqa: E501
            query_params.append(('facet_size', local_var_params['facet_size']))  # noqa: E501
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501
        if 'facets' in local_var_params and local_var_params['facets'] is not None:  # noqa: E501
            query_params.append(('facets', local_var_params['facets']))  # noqa: E501
            collection_formats['facets'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/samples', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def samples_sra_samples_get_0(self, **kwargs):  # noqa: E501
        """Samples  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.samples_sra_samples_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str q: The query, using [lucene query syntax](https://lucene.apache.org/core/3_6_0/queryparsersyntax.html)
        :param int size:
        :param str cursor: The cursor is used to scroll through results. For a query with more results than `size`, the result will include `cursor` in the result json. Use that value here and re-issue the query. The next set or results will be returned. When no more results are available, the `cursor` will again be empty in the result json.
        :param int facet_size: The maximum number of records returned for each facet. This has no effect unless one or more facets are specified.
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param list[str] facets: A list of strings identifying fields for faceted search results. Simple term faceting is used here, meaning that fields that are short text and repeated across records will be binned and counted.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.samples_sra_samples_get_0_with_http_info(**kwargs)  # noqa: E501

    def samples_sra_samples_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """Samples  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.samples_sra_samples_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str q: The query, using [lucene query syntax](https://lucene.apache.org/core/3_6_0/queryparsersyntax.html)
        :param int size:
        :param str cursor: The cursor is used to scroll through results. For a query with more results than `size`, the result will include `cursor` in the result json. Use that value here and re-issue the query. The next set or results will be returned. When no more results are available, the `cursor` will again be empty in the result json.
        :param int facet_size: The maximum number of records returned for each facet. This has no effect unless one or more facets are specified.
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param list[str] facets: A list of strings identifying fields for faceted search results. Simple term faceting is used here, meaning that fields that are short text and repeated across records will be binned and counted.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'q',
            'size',
            'cursor',
            'facet_size',
            'include_fields',
            'exclude_fields',
            'facets'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method samples_sra_samples_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in local_var_params and local_var_params['q'] is not None:  # noqa: E501
            query_params.append(('q', local_var_params['q']))  # noqa: E501
        if 'size' in local_var_params and local_var_params['size'] is not None:  # noqa: E501
            query_params.append(('size', local_var_params['size']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'facet_size' in local_var_params and local_var_params['facet_size'] is not None:  # noqa: E501
            query_params.append(('facet_size', local_var_params['facet_size']))  # noqa: E501
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501
        if 'facets' in local_var_params and local_var_params['facets'] is not None:  # noqa: E501
            query_params.append(('facets', local_var_params['facets']))  # noqa: E501
            collection_formats['facets'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/samples', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def studies_sra_studies_get(self, **kwargs):  # noqa: E501
        """Studies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.studies_sra_studies_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str q: The query, using [lucene query syntax](https://lucene.apache.org/core/3_6_0/queryparsersyntax.html)
        :param int size:
        :param str cursor: The cursor is used to scroll through results. For a query with more results than `size`, the result will include `cursor` in the result json. Use that value here and re-issue the query. The next set or results will be returned. When no more results are available, the `cursor` will again be empty in the result json.
        :param int facet_size: The maximum number of records returned for each facet. This has no effect unless one or more facets are specified.
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param list[str] facets: A list of strings identifying fields for faceted search results. Simple term faceting is used here, meaning that fields that are short text and repeated across records will be binned and counted.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.studies_sra_studies_get_with_http_info(**kwargs)  # noqa: E501

    def studies_sra_studies_get_with_http_info(self, **kwargs):  # noqa: E501
        """Studies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.studies_sra_studies_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str q: The query, using [lucene query syntax](https://lucene.apache.org/core/3_6_0/queryparsersyntax.html)
        :param int size:
        :param str cursor: The cursor is used to scroll through results. For a query with more results than `size`, the result will include `cursor` in the result json. Use that value here and re-issue the query. The next set or results will be returned. When no more results are available, the `cursor` will again be empty in the result json.
        :param int facet_size: The maximum number of records returned for each facet. This has no effect unless one or more facets are specified.
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param list[str] facets: A list of strings identifying fields for faceted search results. Simple term faceting is used here, meaning that fields that are short text and repeated across records will be binned and counted.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'q',
            'size',
            'cursor',
            'facet_size',
            'include_fields',
            'exclude_fields',
            'facets'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method studies_sra_studies_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in local_var_params and local_var_params['q'] is not None:  # noqa: E501
            query_params.append(('q', local_var_params['q']))  # noqa: E501
        if 'size' in local_var_params and local_var_params['size'] is not None:  # noqa: E501
            query_params.append(('size', local_var_params['size']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'facet_size' in local_var_params and local_var_params['facet_size'] is not None:  # noqa: E501
            query_params.append(('facet_size', local_var_params['facet_size']))  # noqa: E501
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501
        if 'facets' in local_var_params and local_var_params['facets'] is not None:  # noqa: E501
            query_params.append(('facets', local_var_params['facets']))  # noqa: E501
            collection_formats['facets'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/studies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def studies_sra_studies_get_0(self, **kwargs):  # noqa: E501
        """Studies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.studies_sra_studies_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str q: The query, using [lucene query syntax](https://lucene.apache.org/core/3_6_0/queryparsersyntax.html)
        :param int size:
        :param str cursor: The cursor is used to scroll through results. For a query with more results than `size`, the result will include `cursor` in the result json. Use that value here and re-issue the query. The next set or results will be returned. When no more results are available, the `cursor` will again be empty in the result json.
        :param int facet_size: The maximum number of records returned for each facet. This has no effect unless one or more facets are specified.
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param list[str] facets: A list of strings identifying fields for faceted search results. Simple term faceting is used here, meaning that fields that are short text and repeated across records will be binned and counted.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.studies_sra_studies_get_0_with_http_info(**kwargs)  # noqa: E501

    def studies_sra_studies_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """Studies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.studies_sra_studies_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str q: The query, using [lucene query syntax](https://lucene.apache.org/core/3_6_0/queryparsersyntax.html)
        :param int size:
        :param str cursor: The cursor is used to scroll through results. For a query with more results than `size`, the result will include `cursor` in the result json. Use that value here and re-issue the query. The next set or results will be returned. When no more results are available, the `cursor` will again be empty in the result json.
        :param int facet_size: The maximum number of records returned for each facet. This has no effect unless one or more facets are specified.
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param list[str] facets: A list of strings identifying fields for faceted search results. Simple term faceting is used here, meaning that fields that are short text and repeated across records will be binned and counted.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ResponseModel, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'q',
            'size',
            'cursor',
            'facet_size',
            'include_fields',
            'exclude_fields',
            'facets'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method studies_sra_studies_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in local_var_params and local_var_params['q'] is not None:  # noqa: E501
            query_params.append(('q', local_var_params['q']))  # noqa: E501
        if 'size' in local_var_params and local_var_params['size'] is not None:  # noqa: E501
            query_params.append(('size', local_var_params['size']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501
        if 'facet_size' in local_var_params and local_var_params['facet_size'] is not None:  # noqa: E501
            query_params.append(('facet_size', local_var_params['facet_size']))  # noqa: E501
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501
        if 'facets' in local_var_params and local_var_params['facets'] is not None:  # noqa: E501
            query_params.append(('facets', local_var_params['facets']))  # noqa: E501
            collection_formats['facets'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/studies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_by_accession_sra_studies_accession_get(self, accession, **kwargs):  # noqa: E501
        """Study By Accession  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_by_accession_sra_studies_accession_get(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.study_by_accession_sra_studies_accession_get_with_http_info(accession, **kwargs)  # noqa: E501

    def study_by_accession_sra_studies_accession_get_with_http_info(self, accession, **kwargs):  # noqa: E501
        """Study By Accession  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_by_accession_sra_studies_accession_get_with_http_info(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accession',
            'include_fields',
            'exclude_fields'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_by_accession_sra_studies_accession_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accession' is set
        if self.api_client.client_side_validation and ('accession' not in local_var_params or  # noqa: E501
                                                        local_var_params['accession'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accession` when calling `study_by_accession_sra_studies_accession_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accession' in local_var_params:
            path_params['accession'] = local_var_params['accession']  # noqa: E501

        query_params = []
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/studies/{accession}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def study_by_accession_sra_studies_accession_get_0(self, accession, **kwargs):  # noqa: E501
        """Study By Accession  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_by_accession_sra_studies_accession_get_0(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.study_by_accession_sra_studies_accession_get_0_with_http_info(accession, **kwargs)  # noqa: E501

    def study_by_accession_sra_studies_accession_get_0_with_http_info(self, accession, **kwargs):  # noqa: E501
        """Study By Accession  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.study_by_accession_sra_studies_accession_get_0_with_http_info(accession, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str accession: An accession for lookup (required)
        :param list[str] include_fields: Fields to include in results. The default is to all fields (*)
        :param list[str] exclude_fields: Fields to exclude from results. The default is to not exclude any fields. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'accession',
            'include_fields',
            'exclude_fields'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method study_by_accession_sra_studies_accession_get_0" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'accession' is set
        if self.api_client.client_side_validation and ('accession' not in local_var_params or  # noqa: E501
                                                        local_var_params['accession'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accession` when calling `study_by_accession_sra_studies_accession_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'accession' in local_var_params:
            path_params['accession'] = local_var_params['accession']  # noqa: E501

        query_params = []
        if 'include_fields' in local_var_params and local_var_params['include_fields'] is not None:  # noqa: E501
            query_params.append(('include_fields', local_var_params['include_fields']))  # noqa: E501
            collection_formats['include_fields'] = 'multi'  # noqa: E501
        if 'exclude_fields' in local_var_params and local_var_params['exclude_fields'] is not None:  # noqa: E501
            query_params.append(('exclude_fields', local_var_params['exclude_fields']))  # noqa: E501
            collection_formats['exclude_fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sra/studies/{accession}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
